########## RIPOSTE SERVER CONFIG ##########
debugActionsEnabled=false
debugChannelLifecycleLoggingEnabled=false

# Configure how the app listens for requests.
endpoints {
  port=8080
  # The ssl port will only be used if useSsl is set to true,
  #   and if useSsl is true then all traffic must be SSL/HTTPS (i.e. you can choose HTTP, or HTTPS, but not both).
  sslPort=8443
  useSsl=false
}

# Configure some core Netty stuff.
netty {
  # Number of netty boss threads. This is usually fine at 1
  bossThreadCount=1
  # Number of netty I/O worker threads.
  #   0 indicates that netty should use the default number of worker threads, which is 2 * [CPU cores in system].
  #   Do performance testing before assuming a different number will have a beneficial effect.
  workerThreadCount=0

  # NOTE: maxRequestSizeInBytes is currently disabled - setting this value will have no effect (for now).
  # The maximum allowed request size in bytes. If netty receives a request larger than this then it will throw a
  #   TooLongFrameException. This value is an integer, so the max you can set it to is Integer.MAX_VALUE, which
  #   corresponds to 2^31-1, or 2147483647. Since that is around 2 GB it is effectively unlimited for most use cases.
  #   If you have a more reasonable max you want to allow for your app you can set it here, and netty will fail-fast
  #   when it sees a request that exceeds that value.
  maxRequestSizeInBytes=2147483647

  # The netty leak detection level tells netty how aggressively it should look for leaks of reference-counted objects.
  #   See https://github.com/netty/netty/wiki/Reference-counted-objects
  # The following are your options (descriptions taken from the documentation page). This will be used to set the
  #   io.netty.leakDetectionLevel System property before the server is started.
  #   * DISABLED - disables leak detection completely. Not recommended.
  #   * SIMPLE - tells if there is a leak or not for 1% of buffers. Default.
  #   * ADVANCED - tells where the leaked buffer was accessed for 1% of buffers.
  #   * PARANOID - Same with ADVANCED except that it's for every single buffer. Useful for automated testing phase.
  #                You could fail the build if the build output contains 'LEAK:'.
  leakDetectionLevel=SIMPLE
}

# Configure metrics reporters.
metrics {
  # Whether or not to report JVM metrics to the metrics system.
  reportJvmMetrics=false

  graphite {
    # The port to use when connecting to graphite/cyanite. This is often the same for every environment so it's here in
    #   the defaults. The URL is often different though and would likely be specified in each environment's config file
    #   separately if you use graphite.
    port=2003
    url=fixme
    reporting.enabled=false
  }

  # Whether or not to report metrics periodically to the SLF4J logs. Creates a lot of log spam so defaults to off,
  #   but is useful if you want to see what is being measured without a lot of effort.
  slf4j.reporting.enabled=false

  # Whether or not to report metrics periodically to JMX.
  jmx.reporting.enabled=true
}

# This will be replaced at build-time with the version number of the final fat jar artifact.
service.version="@@RELEASE@@"

########## EUREKA STUFF #############
# TODO: EXAMPLE CLEANUP - If you don't use Eureka then you can remove this eureka-related section.
# NOTE: We default eureka to off/disabled since not everyone needs it.
com.nike.eureka.disable=true
# Default to the configuration needed for Eureka in an AWS environment.
com.nike.eureka.datacenter.type=Amazon

########## APPLICATION STUFF ########
# TODO: EXAMPLE CLEANUP - Remove everything in the "APPLICATION STUFF" section.
# Whether or not embedded cassandra should start up. If set to disable cassandra then the cassandra endpoint will not
#   function. We disable cassandra everywhere except local box testing since it is difficult to get working in an
#   AWS/AMI environment and is not worth the time to figure out for this example project. You likely wouldn't deploy
#   to production with embedded cassandra, and the local environment is sufficient for the purpose of showing how to
#   interact with cassandra in an async non-blocking way.
disableCassandra=true

# Basic auth credentials for ExampleBasicAuthProtectedEndpoint
exampleBasicAuth {
  username=foo
  password=bar
}
